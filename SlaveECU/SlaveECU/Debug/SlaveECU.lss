
SlaveECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bda  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000701  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e4  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000057b  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  64:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MCAL_DIO_u8PinDirection>:
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
	if ((Copy_u8PinNo>=dio_pin_0)&&(Copy_u8PinNo<=dio_pin_7))
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <MCAL_DIO_u8PinDirection+0x6>
  70:	5d c0       	rjmp	.+186    	; 0x12c <MCAL_DIO_u8PinDirection+0xc0>
	{
		switch(Copy_u8PortNo)
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	e1 f0       	breq	.+56     	; 0xae <MCAL_DIO_u8PinDirection+0x42>
  76:	30 f0       	brcs	.+12     	; 0x84 <MCAL_DIO_u8PinDirection+0x18>
  78:	82 30       	cpi	r24, 0x02	; 2
  7a:	71 f1       	breq	.+92     	; 0xd8 <MCAL_DIO_u8PinDirection+0x6c>
  7c:	83 30       	cpi	r24, 0x03	; 3
  7e:	09 f4       	brne	.+2      	; 0x82 <MCAL_DIO_u8PinDirection+0x16>
  80:	40 c0       	rjmp	.+128    	; 0x102 <MCAL_DIO_u8PinDirection+0x96>
  82:	56 c0       	rjmp	.+172    	; 0x130 <MCAL_DIO_u8PinDirection+0xc4>
		{
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
  84:	2a b3       	in	r18, 0x1a	; 26
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	06 2e       	mov	r0, r22
  8c:	02 c0       	rjmp	.+4      	; 0x92 <MCAL_DIO_u8PinDirection+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <MCAL_DIO_u8PinDirection+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <MCAL_DIO_u8PinDirection+0x36>
  9e:	44 0f       	add	r20, r20
  a0:	55 1f       	adc	r21, r21
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <MCAL_DIO_u8PinDirection+0x32>
  a6:	48 2b       	or	r20, r24
  a8:	4a bb       	out	0x1a, r20	; 26
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
  aa:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8PortNo)
		{
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
			break;
  ac:	08 95       	ret
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <MCAL_DIO_u8PinDirection+0x50>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <MCAL_DIO_u8PinDirection+0x4c>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <MCAL_DIO_u8PinDirection+0x60>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <MCAL_DIO_u8PinDirection+0x5c>
  d0:	48 2b       	or	r20, r24
  d2:	47 bb       	out	0x17, r20	; 23
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
  d4:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
			break;
  d6:	08 95       	ret
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
  d8:	24 b3       	in	r18, 0x14	; 20
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	06 2e       	mov	r0, r22
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <MCAL_DIO_u8PinDirection+0x7a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <MCAL_DIO_u8PinDirection+0x76>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <MCAL_DIO_u8PinDirection+0x8a>
  f2:	44 0f       	add	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <MCAL_DIO_u8PinDirection+0x86>
  fa:	48 2b       	or	r20, r24
  fc:	44 bb       	out	0x14, r20	; 20
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
  fe:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
			break;
 100:	08 95       	ret
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
 102:	21 b3       	in	r18, 0x11	; 17
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	06 2e       	mov	r0, r22
 10a:	02 c0       	rjmp	.+4      	; 0x110 <MCAL_DIO_u8PinDirection+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <MCAL_DIO_u8PinDirection+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <MCAL_DIO_u8PinDirection+0xb4>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <MCAL_DIO_u8PinDirection+0xb0>
 124:	48 2b       	or	r20, r24
 126:	41 bb       	out	0x11, r20	; 17
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
 128:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
			break;
 12a:	08 95       	ret
			Local_ErrorStatus =Error;
		}
	}
	else
	{
		Local_ErrorStatus = Error;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
			break;
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
			break;
			default:
			Local_ErrorStatus =Error;
 130:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_ErrorStatus = Error;
	}
	return Local_ErrorStatus;
}
 132:	08 95       	ret

00000134 <MCAL_DIO_u8PinVal>:
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
	if ((Copy_u8PinNo>=dio_pin_0)&&(Copy_u8PinNo<=dio_pin_7))
 134:	68 30       	cpi	r22, 0x08	; 8
 136:	08 f0       	brcs	.+2      	; 0x13a <MCAL_DIO_u8PinVal+0x6>
 138:	5d c0       	rjmp	.+186    	; 0x1f4 <MCAL_DIO_u8PinVal+0xc0>
	{
		switch(Copy_u8PortNo)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	e1 f0       	breq	.+56     	; 0x176 <MCAL_DIO_u8PinVal+0x42>
 13e:	30 f0       	brcs	.+12     	; 0x14c <MCAL_DIO_u8PinVal+0x18>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	71 f1       	breq	.+92     	; 0x1a0 <MCAL_DIO_u8PinVal+0x6c>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f4       	brne	.+2      	; 0x14a <MCAL_DIO_u8PinVal+0x16>
 148:	40 c0       	rjmp	.+128    	; 0x1ca <MCAL_DIO_u8PinVal+0x96>
 14a:	56 c0       	rjmp	.+172    	; 0x1f8 <MCAL_DIO_u8PinVal+0xc4>
		{
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
 14c:	2b b3       	in	r18, 0x1b	; 27
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	06 2e       	mov	r0, r22
 154:	02 c0       	rjmp	.+4      	; 0x15a <MCAL_DIO_u8PinVal+0x26>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <MCAL_DIO_u8PinVal+0x22>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <MCAL_DIO_u8PinVal+0x36>
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <MCAL_DIO_u8PinVal+0x32>
 16e:	48 2b       	or	r20, r24
 170:	4b bb       	out	0x1b, r20	; 27
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 172:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8PortNo)
		{
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
			break;
 174:	08 95       	ret
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
 176:	28 b3       	in	r18, 0x18	; 24
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	06 2e       	mov	r0, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <MCAL_DIO_u8PinVal+0x50>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <MCAL_DIO_u8PinVal+0x4c>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <MCAL_DIO_u8PinVal+0x60>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <MCAL_DIO_u8PinVal+0x5c>
 198:	48 2b       	or	r20, r24
 19a:	48 bb       	out	0x18, r20	; 24
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 19c:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
			break;
 19e:	08 95       	ret
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
 1a0:	25 b3       	in	r18, 0x15	; 21
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	06 2e       	mov	r0, r22
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <MCAL_DIO_u8PinVal+0x7a>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <MCAL_DIO_u8PinVal+0x76>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <MCAL_DIO_u8PinVal+0x8a>
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <MCAL_DIO_u8PinVal+0x86>
 1c2:	48 2b       	or	r20, r24
 1c4:	45 bb       	out	0x15, r20	; 21
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
			break;
 1c8:	08 95       	ret
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
 1ca:	22 b3       	in	r18, 0x12	; 18
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	06 2e       	mov	r0, r22
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <MCAL_DIO_u8PinVal+0xa4>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <MCAL_DIO_u8PinVal+0xa0>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <MCAL_DIO_u8PinVal+0xb4>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <MCAL_DIO_u8PinVal+0xb0>
 1ec:	48 2b       	or	r20, r24
 1ee:	42 bb       	out	0x12, r20	; 18
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
			break;
 1f2:	08 95       	ret
			Local_ErrorStatus =Error;
		}
	}
	else
	{
		Local_ErrorStatus = Error;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
			break;
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
			break;
			default:
			Local_ErrorStatus =Error;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_ErrorStatus = Error;
	}
	return Local_ErrorStatus;
}
 1fa:	08 95       	ret

000001fc <main>:
#include "spi_interface.h"



int main(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x6>
 202:	00 d0       	rcall	.+0      	; 0x204 <main+0x8>
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	uint8_t x;
	MCAL_DIO_u8PinDirection(dio_portD,dio_pin_1,dio_pin_output);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
	MCAL_DIO_u8PinDirection(dio_portD,dio_pin_2,dio_pin_output);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
    ptr_spi obj = {SPI_SLAVE,SPI_MSB,CLK_IDLE_LOW,CLK_SAMPLE_LEADING};
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	25 e0       	ldi	r18, 0x05	; 5
 224:	fc 01       	movw	r30, r24
 226:	11 92       	st	Z+, r1
 228:	2a 95       	dec	r18
 22a:	e9 f7       	brne	.-6      	; 0x226 <main+0x2a>
	MCAL_SPI_voidInit(&obj);
 22c:	0e 94 48 01 	call	0x290	; 0x290 <MCAL_SPI_voidInit>
	MCAL_DIO_u8PinVal(dio_portD,dio_pin_1,dio_pin_low);
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
    MCAL_DIO_u8PinVal(dio_portD,dio_pin_2,dio_pin_low);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
    while (1) 
    {
		x = MCAL_SPI_u8SlaveReceive();
 244:	0e 94 ca 01 	call	0x394	; 0x394 <MCAL_SPI_u8SlaveReceive>
		if (x == '1')
 248:	81 33       	cpi	r24, 0x31	; 49
 24a:	81 f4       	brne	.+32     	; 0x26c <main+0x70>
		{
			if (get_bit(PIND,dio_pin_1)==1)
 24c:	81 9b       	sbis	0x10, 1	; 16
 24e:	06 c0       	rjmp	.+12     	; 0x25c <main+0x60>
			{
				MCAL_DIO_u8PinVal(dio_portD,dio_pin_1,dio_pin_low);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
 25a:	f4 cf       	rjmp	.-24     	; 0x244 <main+0x48>
			} 
			else if(get_bit(PIND,dio_pin_1)==0)
 25c:	81 99       	sbic	0x10, 1	; 16
 25e:	f2 cf       	rjmp	.-28     	; 0x244 <main+0x48>
			{
				MCAL_DIO_u8PinVal(dio_portD,dio_pin_1,dio_pin_high);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
 26a:	ec cf       	rjmp	.-40     	; 0x244 <main+0x48>
			}
		} 
		else if (x == '2')
 26c:	82 33       	cpi	r24, 0x32	; 50
 26e:	51 f7       	brne	.-44     	; 0x244 <main+0x48>
		{
			if (get_bit(PIND,dio_pin_2)==1)
 270:	82 9b       	sbis	0x10, 2	; 16
 272:	06 c0       	rjmp	.+12     	; 0x280 <main+0x84>
			{
				MCAL_DIO_u8PinVal(dio_portD,dio_pin_2,dio_pin_low);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
 27e:	e2 cf       	rjmp	.-60     	; 0x244 <main+0x48>
			}
			else if(get_bit(PIND,dio_pin_2)==0)
 280:	82 99       	sbic	0x10, 2	; 16
 282:	e0 cf       	rjmp	.-64     	; 0x244 <main+0x48>
			{
				MCAL_DIO_u8PinVal(dio_portD,dio_pin_2,dio_pin_high);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	0e 94 9a 00 	call	0x134	; 0x134 <MCAL_DIO_u8PinVal>
 28e:	da cf       	rjmp	.-76     	; 0x244 <main+0x48>

00000290 <MCAL_SPI_voidInit>:
	SPDR = u8Data;
	MCAL_DIO_u8PinVal(dio_portB,dio_pin_4,dio_pin_low);	
	set_bit(SPCR,SPCR_SPE);
	while(get_bit(SPSR,SPSR_SPIF)!=1);
	clr_bit(SPCR,SPCR_SPE);
	MCAL_DIO_u8PinVal(dio_portB,dio_pin_4,dio_pin_high);
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	88 81       	ld	r24, Y
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <MCAL_SPI_voidInit+0xe>
 29c:	4c c0       	rjmp	.+152    	; 0x336 <MCAL_SPI_voidInit+0xa6>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	65 e0       	ldi	r22, 0x05	; 5
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	66 e0       	ldi	r22, 0x06	; 6
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	67 e0       	ldi	r22, 0x07	; 7
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 2c4:	2d b1       	in	r18, 0x0d	; 13
 2c6:	98 81       	ld	r25, Y
 2c8:	30 e1       	ldi	r19, 0x10	; 16
 2ca:	93 9f       	mul	r25, r19
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	92 2f       	mov	r25, r18
 2d2:	9f 7e       	andi	r25, 0xEF	; 239
 2d4:	89 2b       	or	r24, r25
 2d6:	8d b9       	out	0x0d, r24	; 13
 2d8:	99 81       	ldd	r25, Y+1	; 0x01
 2da:	92 30       	cpi	r25, 0x02	; 2
 2dc:	48 f4       	brcc	.+18     	; 0x2f0 <MCAL_SPI_voidInit+0x60>
 2de:	8d b1       	in	r24, 0x0d	; 13
 2e0:	28 2f       	mov	r18, r24
 2e2:	2f 7d       	andi	r18, 0xDF	; 223
 2e4:	30 e2       	ldi	r19, 0x20	; 32
 2e6:	93 9f       	mul	r25, r19
 2e8:	c0 01       	movw	r24, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	82 2b       	or	r24, r18
 2ee:	8d b9       	out	0x0d, r24	; 13
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	38 f4       	brcc	.+14     	; 0x304 <MCAL_SPI_voidInit+0x74>
 2f6:	9d b1       	in	r25, 0x0d	; 13
 2f8:	97 7f       	andi	r25, 0xF7	; 247
 2fa:	88 0f       	add	r24, r24
 2fc:	88 0f       	add	r24, r24
 2fe:	88 0f       	add	r24, r24
 300:	89 2b       	or	r24, r25
 302:	8d b9       	out	0x0d, r24	; 13
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	30 f4       	brcc	.+12     	; 0x316 <MCAL_SPI_voidInit+0x86>
 30a:	9d b1       	in	r25, 0x0d	; 13
 30c:	9b 7f       	andi	r25, 0xFB	; 251
 30e:	88 0f       	add	r24, r24
 310:	88 0f       	add	r24, r24
 312:	89 2b       	or	r24, r25
 314:	8d b9       	out	0x0d, r24	; 13
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	38 f4       	brcc	.+14     	; 0x32a <MCAL_SPI_voidInit+0x9a>
 31c:	2d b1       	in	r18, 0x0d	; 13
 31e:	9d b1       	in	r25, 0x0d	; 13
 320:	2c 7f       	andi	r18, 0xFC	; 252
 322:	83 70       	andi	r24, 0x03	; 3
 324:	82 2b       	or	r24, r18
 326:	89 2b       	or	r24, r25
 328:	8d b9       	out	0x0d, r24	; 13
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	08 f0       	brcs	.+2      	; 0x332 <MCAL_SPI_voidInit+0xa2>
 330:	70 9a       	sbi	0x0e, 0	; 14
 332:	6e 9a       	sbi	0x0d, 6	; 13
 334:	2c c0       	rjmp	.+88     	; 0x38e <MCAL_SPI_voidInit+0xfe>
 336:	81 11       	cpse	r24, r1
 338:	2a c0       	rjmp	.+84     	; 0x38e <MCAL_SPI_voidInit+0xfe>
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	65 e0       	ldi	r22, 0x05	; 5
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	66 e0       	ldi	r22, 0x06	; 6
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_DIO_u8PinDirection>
 362:	99 81       	ldd	r25, Y+1	; 0x01
 364:	92 30       	cpi	r25, 0x02	; 2
 366:	48 f4       	brcc	.+18     	; 0x37a <MCAL_SPI_voidInit+0xea>
 368:	8d b1       	in	r24, 0x0d	; 13
 36a:	28 2f       	mov	r18, r24
 36c:	2f 7d       	andi	r18, 0xDF	; 223
 36e:	30 e2       	ldi	r19, 0x20	; 32
 370:	93 9f       	mul	r25, r19
 372:	c0 01       	movw	r24, r0
 374:	11 24       	eor	r1, r1
 376:	82 2b       	or	r24, r18
 378:	8d b9       	out	0x0d, r24	; 13
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	30 f4       	brcc	.+12     	; 0x38c <MCAL_SPI_voidInit+0xfc>
 380:	9d b1       	in	r25, 0x0d	; 13
 382:	9b 7f       	andi	r25, 0xFB	; 251
 384:	88 0f       	add	r24, r24
 386:	88 0f       	add	r24, r24
 388:	89 2b       	or	r24, r25
 38a:	8d b9       	out	0x0d, r24	; 13
 38c:	6e 9a       	sbi	0x0d, 6	; 13
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <MCAL_SPI_u8SlaveReceive>:

uint8_t MCAL_SPI_u8SlaveReceive()
{
	uint8_t x;
	//SPDR=0;
	set_bit(SPCR,SPCR_SPE);
 394:	6e 9a       	sbi	0x0d, 6	; 13
	while(get_bit(SPSR,SPSR_SPIF)!=1);
 396:	77 9b       	sbis	0x0e, 7	; 14
 398:	fe cf       	rjmp	.-4      	; 0x396 <MCAL_SPI_u8SlaveReceive+0x2>
	x = SPDR;
 39a:	8f b1       	in	r24, 0x0f	; 15
	clr_bit(SPCR,SPCR_SPE);
 39c:	6e 98       	cbi	0x0d, 6	; 13
	return x;
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
