
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000004ac  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d55  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d5  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bb  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051f  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000631  00000000  00000000  000028c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 09 01 	call	0x212	; 0x212 <main>
  7a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCAL_DIO_u8PinDirection>:
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
	if ((Copy_u8PinNo>=dio_pin_0)&&(Copy_u8PinNo<=dio_pin_7))
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <MCAL_DIO_u8PinDirection+0x6>
  86:	5d c0       	rjmp	.+186    	; 0x142 <MCAL_DIO_u8PinDirection+0xc0>
	{
		switch(Copy_u8PortNo)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	e1 f0       	breq	.+56     	; 0xc4 <MCAL_DIO_u8PinDirection+0x42>
  8c:	30 f0       	brcs	.+12     	; 0x9a <MCAL_DIO_u8PinDirection+0x18>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	71 f1       	breq	.+92     	; 0xee <MCAL_DIO_u8PinDirection+0x6c>
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	09 f4       	brne	.+2      	; 0x98 <MCAL_DIO_u8PinDirection+0x16>
  96:	40 c0       	rjmp	.+128    	; 0x118 <MCAL_DIO_u8PinDirection+0x96>
  98:	56 c0       	rjmp	.+172    	; 0x146 <MCAL_DIO_u8PinDirection+0xc4>
		{
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
  9a:	2a b3       	in	r18, 0x1a	; 26
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	06 2e       	mov	r0, r22
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <MCAL_DIO_u8PinDirection+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <MCAL_DIO_u8PinDirection+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <MCAL_DIO_u8PinDirection+0x36>
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <MCAL_DIO_u8PinDirection+0x32>
  bc:	48 2b       	or	r20, r24
  be:	4a bb       	out	0x1a, r20	; 26
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
  c0:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8PortNo)
		{
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
			break;
  c2:	08 95       	ret
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	06 2e       	mov	r0, r22
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <MCAL_DIO_u8PinDirection+0x50>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <MCAL_DIO_u8PinDirection+0x4c>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <MCAL_DIO_u8PinDirection+0x60>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <MCAL_DIO_u8PinDirection+0x5c>
  e6:	48 2b       	or	r20, r24
  e8:	47 bb       	out	0x17, r20	; 23
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
  ea:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portA:
			assign_bit(DDRA,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
			break;
  ec:	08 95       	ret
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	06 2e       	mov	r0, r22
  f6:	02 c0       	rjmp	.+4      	; 0xfc <MCAL_DIO_u8PinDirection+0x7a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <MCAL_DIO_u8PinDirection+0x76>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <MCAL_DIO_u8PinDirection+0x8a>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <MCAL_DIO_u8PinDirection+0x86>
 110:	48 2b       	or	r20, r24
 112:	44 bb       	out	0x14, r20	; 20
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
 114:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portB:
			assign_bit(DDRB,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
			break;
 116:	08 95       	ret
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
 118:	21 b3       	in	r18, 0x11	; 17
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	06 2e       	mov	r0, r22
 120:	02 c0       	rjmp	.+4      	; 0x126 <MCAL_DIO_u8PinDirection+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <MCAL_DIO_u8PinDirection+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <MCAL_DIO_u8PinDirection+0xb4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <MCAL_DIO_u8PinDirection+0xb0>
 13a:	48 2b       	or	r20, r24
 13c:	41 bb       	out	0x11, r20	; 17
#include "dio_interface.h"
#include "compile.h"

uint8_t MCAL_DIO_u8PinDirection(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Direction)
{
	uint8_t Local_ErrorStatus = NoError;
 13e:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portC:
			assign_bit(DDRC,Copy_u8PinNo,Copy_u8Direction);
			break;
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
			break;
 140:	08 95       	ret
			Local_ErrorStatus =Error;
		}
	}
	else
	{
		Local_ErrorStatus = Error;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
			break;
			case dio_portD:
			assign_bit(DDRD,Copy_u8PinNo,Copy_u8Direction);
			break;
			default:
			Local_ErrorStatus =Error;
 146:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_ErrorStatus = Error;
	}
	return Local_ErrorStatus;
}
 148:	08 95       	ret

0000014a <MCAL_DIO_u8PinVal>:
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
	if ((Copy_u8PinNo>=dio_pin_0)&&(Copy_u8PinNo<=dio_pin_7))
 14a:	68 30       	cpi	r22, 0x08	; 8
 14c:	08 f0       	brcs	.+2      	; 0x150 <MCAL_DIO_u8PinVal+0x6>
 14e:	5d c0       	rjmp	.+186    	; 0x20a <MCAL_DIO_u8PinVal+0xc0>
	{
		switch(Copy_u8PortNo)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	e1 f0       	breq	.+56     	; 0x18c <MCAL_DIO_u8PinVal+0x42>
 154:	30 f0       	brcs	.+12     	; 0x162 <MCAL_DIO_u8PinVal+0x18>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	71 f1       	breq	.+92     	; 0x1b6 <MCAL_DIO_u8PinVal+0x6c>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	09 f4       	brne	.+2      	; 0x160 <MCAL_DIO_u8PinVal+0x16>
 15e:	40 c0       	rjmp	.+128    	; 0x1e0 <MCAL_DIO_u8PinVal+0x96>
 160:	56 c0       	rjmp	.+172    	; 0x20e <MCAL_DIO_u8PinVal+0xc4>
		{
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
 162:	2b b3       	in	r18, 0x1b	; 27
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	06 2e       	mov	r0, r22
 16a:	02 c0       	rjmp	.+4      	; 0x170 <MCAL_DIO_u8PinVal+0x26>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <MCAL_DIO_u8PinVal+0x22>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MCAL_DIO_u8PinVal+0x36>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <MCAL_DIO_u8PinVal+0x32>
 184:	48 2b       	or	r20, r24
 186:	4b bb       	out	0x1b, r20	; 27
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 188:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8PortNo)
		{
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
			break;
 18a:	08 95       	ret
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
 18c:	28 b3       	in	r18, 0x18	; 24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	06 2e       	mov	r0, r22
 194:	02 c0       	rjmp	.+4      	; 0x19a <MCAL_DIO_u8PinVal+0x50>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <MCAL_DIO_u8PinVal+0x4c>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <MCAL_DIO_u8PinVal+0x60>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <MCAL_DIO_u8PinVal+0x5c>
 1ae:	48 2b       	or	r20, r24
 1b0:	48 bb       	out	0x18, r20	; 24
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portA:
			assign_bit(PORTA,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
			break;
 1b4:	08 95       	ret
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
 1b6:	25 b3       	in	r18, 0x15	; 21
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	06 2e       	mov	r0, r22
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <MCAL_DIO_u8PinVal+0x7a>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <MCAL_DIO_u8PinVal+0x76>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <MCAL_DIO_u8PinVal+0x8a>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <MCAL_DIO_u8PinVal+0x86>
 1d8:	48 2b       	or	r20, r24
 1da:	45 bb       	out	0x15, r20	; 21
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portB:
			assign_bit(PORTB,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
			break;
 1de:	08 95       	ret
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	06 2e       	mov	r0, r22
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <MCAL_DIO_u8PinVal+0xa4>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <MCAL_DIO_u8PinVal+0xa0>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MCAL_DIO_u8PinVal+0xb4>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MCAL_DIO_u8PinVal+0xb0>
 202:	48 2b       	or	r20, r24
 204:	42 bb       	out	0x12, r20	; 18
	}
	return Local_ErrorStatus;
}
uint8_t MCAL_DIO_u8PinVal(uint8_t Copy_u8PortNo, uint8_t Copy_u8PinNo, uint8_t Copy_u8Value)
{
	uint8_t Local_ErrorStatus = NoError;
 206:	80 e0       	ldi	r24, 0x00	; 0
			case dio_portC:
			assign_bit(PORTC,Copy_u8PinNo,Copy_u8Value);
			break;
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
			break;
 208:	08 95       	ret
			Local_ErrorStatus =Error;
		}
	}
	else
	{
		Local_ErrorStatus = Error;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
			break;
			case dio_portD:
			assign_bit(PORTD,Copy_u8PinNo,Copy_u8Value);
			break;
			default:
			Local_ErrorStatus =Error;
 20e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_ErrorStatus = Error;
	}
	return Local_ErrorStatus;
}
 210:	08 95       	ret

00000212 <main>:
#include "usart_reg.h"
#include "usart_interface.h"
#include "spi_reg.h"
#include "spi_interface.h"
int main()
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	6c 97       	sbiw	r28, 0x1c	; 28
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	ptr_spi obj = {SPI_MASTER,SPI_MSB,CLK_IDLE_LOW,CLK_SAMPLE_LEADING,SPI_CLK_64};
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	e0 e6       	ldi	r30, 0x60	; 96
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	de 01       	movw	r26, r28
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	01 90       	ld	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	8a 95       	dec	r24
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x1e>
	MCAL_SPI_voidInit(&obj);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCAL_SPI_voidInit>
	MCAL_USART_voidInit(9600);
 240:	60 e8       	ldi	r22, 0x80	; 128
 242:	75 e2       	ldi	r23, 0x25	; 37
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 e7 01 	call	0x3ce	; 0x3ce <MCAL_USART_voidInit>
	MCAL_DIO_u8PinDirection(dio_portC,dio_pin_2,dio_pin_output);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
	MCAL_DIO_u8PinDirection(dio_portC,dio_pin_7,dio_pin_output);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	67 e0       	ldi	r22, 0x07	; 7
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
	uint8_t arr[] = "Please Enter a Button:";
 260:	87 e1       	ldi	r24, 0x17	; 23
 262:	e5 e6       	ldi	r30, 0x65	; 101
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	de 01       	movw	r26, r28
 268:	16 96       	adiw	r26, 0x06	; 6
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x58>
	MCAL_USART_voidTransmitString(arr);
 272:	ce 01       	movw	r24, r28
 274:	06 96       	adiw	r24, 0x06	; 6
 276:	0e 94 1c 02 	call	0x438	; 0x438 <MCAL_USART_voidTransmitString>
	uint8_t chr;
	while(1)
	{
		chr = MCAL_USART_u8Receive();
 27a:	0e 94 18 02 	call	0x430	; 0x430 <MCAL_USART_u8Receive>
		if (chr == '1')
 27e:	81 33       	cpi	r24, 0x31	; 49
 280:	49 f4       	brne	.+18     	; 0x294 <main+0x82>
		{
			MCAL_DIO_u8PinVal(dio_portC,dio_pin_2,dio_pin_high);//this one is used to tell us that the program went through this condition
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 a5 00 	call	0x14a	; 0x14a <MCAL_DIO_u8PinVal>
			MCAL_SPI_MasterTransData(chr);
 28c:	81 e3       	ldi	r24, 0x31	; 49
 28e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <MCAL_SPI_MasterTransData>
 292:	f3 cf       	rjmp	.-26     	; 0x27a <main+0x68>
		}
		else if (chr =='2')
 294:	82 33       	cpi	r24, 0x32	; 50
 296:	89 f7       	brne	.-30     	; 0x27a <main+0x68>
		{
			MCAL_DIO_u8PinVal(dio_portC,dio_pin_7,dio_pin_high);//this one is used to tell us that the program went through this condition
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 a5 00 	call	0x14a	; 0x14a <MCAL_DIO_u8PinVal>
			MCAL_SPI_MasterTransData(chr);
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <MCAL_SPI_MasterTransData>
 2a8:	e8 cf       	rjmp	.-48     	; 0x27a <main+0x68>

000002aa <MCAL_SPI_voidInit>:
	uint8_t clk_phase;
	uint8_t spi_clk;
}ptr_spi;
*/
void MCAL_SPI_voidInit(ptr_spi *ptr_info)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	if ((ptr_info->spi_type)==SPI_MASTER)
 2b0:	88 81       	ld	r24, Y
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <MCAL_SPI_voidInit+0xe>
 2b6:	4c c0       	rjmp	.+152    	; 0x350 <MCAL_SPI_voidInit+0xa6>
	{
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_4,dio_pin_output);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	64 e0       	ldi	r22, 0x04	; 4
 2bc:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_5,dio_pin_output);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	65 e0       	ldi	r22, 0x05	; 5
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_6,dio_pin_input);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	66 e0       	ldi	r22, 0x06	; 6
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_7,dio_pin_output);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	67 e0       	ldi	r22, 0x07	; 7
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		assign_bit(SPCR,SPCR_MSTR,ptr_info->spi_type);
 2de:	2d b1       	in	r18, 0x0d	; 13
 2e0:	98 81       	ld	r25, Y
 2e2:	30 e1       	ldi	r19, 0x10	; 16
 2e4:	93 9f       	mul	r25, r19
 2e6:	c0 01       	movw	r24, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	92 2f       	mov	r25, r18
 2ec:	9f 7e       	andi	r25, 0xEF	; 239
 2ee:	89 2b       	or	r24, r25
 2f0:	8d b9       	out	0x0d, r24	; 13
		if (((ptr_info->spi_data_direction)==SPI_MSB)||((ptr_info->spi_data_direction)==SPI_LSB))
 2f2:	99 81       	ldd	r25, Y+1	; 0x01
 2f4:	92 30       	cpi	r25, 0x02	; 2
 2f6:	48 f4       	brcc	.+18     	; 0x30a <MCAL_SPI_voidInit+0x60>
		{
			assign_bit(SPCR,SPCR_DORD,ptr_info->spi_data_direction);
 2f8:	8d b1       	in	r24, 0x0d	; 13
 2fa:	28 2f       	mov	r18, r24
 2fc:	2f 7d       	andi	r18, 0xDF	; 223
 2fe:	30 e2       	ldi	r19, 0x20	; 32
 300:	93 9f       	mul	r25, r19
 302:	c0 01       	movw	r24, r0
 304:	11 24       	eor	r1, r1
 306:	82 2b       	or	r24, r18
 308:	8d b9       	out	0x0d, r24	; 13
		}
		if (((ptr_info->clk_polarity)==CLK_IDLE_LOW) || ((ptr_info->clk_polarity)==CLK_IDLE_HIGH))
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	38 f4       	brcc	.+14     	; 0x31e <MCAL_SPI_voidInit+0x74>
		{
			assign_bit(SPCR,SPCR_CPOL,ptr_info->clk_polarity);
 310:	9d b1       	in	r25, 0x0d	; 13
 312:	97 7f       	andi	r25, 0xF7	; 247
 314:	88 0f       	add	r24, r24
 316:	88 0f       	add	r24, r24
 318:	88 0f       	add	r24, r24
 31a:	89 2b       	or	r24, r25
 31c:	8d b9       	out	0x0d, r24	; 13
		}
		if (((ptr_info->clk_phase)==CLK_SAMPLE_LEADING) || ((ptr_info->clk_phase)==CLK_SAMPLE_TRAILING))
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	30 f4       	brcc	.+12     	; 0x330 <MCAL_SPI_voidInit+0x86>
		{
			assign_bit(SPCR,SPCR_CPHA,ptr_info->clk_phase);
 324:	9d b1       	in	r25, 0x0d	; 13
 326:	9b 7f       	andi	r25, 0xFB	; 251
 328:	88 0f       	add	r24, r24
 32a:	88 0f       	add	r24, r24
 32c:	89 2b       	or	r24, r25
 32e:	8d b9       	out	0x0d, r24	; 13
		}
		if (((ptr_info->spi_clk)>=SPI_CLK_4)&&((ptr_info->spi_clk)<=SPI_CLK_Double_64))
 330:	8c 81       	ldd	r24, Y+4	; 0x04
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	38 f4       	brcc	.+14     	; 0x344 <MCAL_SPI_voidInit+0x9a>
		{
			SPCR |= (SPCR & 0xFC) | ((ptr_info->spi_clk) & 0x03);
 336:	2d b1       	in	r18, 0x0d	; 13
 338:	9d b1       	in	r25, 0x0d	; 13
 33a:	2c 7f       	andi	r18, 0xFC	; 252
 33c:	83 70       	andi	r24, 0x03	; 3
 33e:	82 2b       	or	r24, r18
 340:	89 2b       	or	r24, r25
 342:	8d b9       	out	0x0d, r24	; 13
		}
		if ((ptr_info->spi_clk)>=SPI_CLK_Double_2)
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	08 f0       	brcs	.+2      	; 0x34c <MCAL_SPI_voidInit+0xa2>
		{
			set_bit(SPSR,SPSR_SPI2X);
 34a:	70 9a       	sbi	0x0e, 0	; 14
		}
		set_bit(SPCR,SPCR_SPE);
 34c:	6e 9a       	sbi	0x0d, 6	; 13
 34e:	2c c0       	rjmp	.+88     	; 0x3a8 <MCAL_SPI_voidInit+0xfe>
	}
	else if ((ptr_info->spi_type)==SPI_SLAVE)
 350:	81 11       	cpse	r24, r1
 352:	2a c0       	rjmp	.+84     	; 0x3a8 <MCAL_SPI_voidInit+0xfe>
	{
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_4,dio_pin_input);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	64 e0       	ldi	r22, 0x04	; 4
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_5,dio_pin_input);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	65 e0       	ldi	r22, 0x05	; 5
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_6,dio_pin_output);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	66 e0       	ldi	r22, 0x06	; 6
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		MCAL_DIO_u8PinDirection(dio_portB,dio_pin_7,dio_pin_input);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	67 e0       	ldi	r22, 0x07	; 7
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 41 00 	call	0x82	; 0x82 <MCAL_DIO_u8PinDirection>
		
		if (((ptr_info->spi_data_direction)==SPI_MSB)||((ptr_info->spi_data_direction)==SPI_LSB))
 37c:	99 81       	ldd	r25, Y+1	; 0x01
 37e:	92 30       	cpi	r25, 0x02	; 2
 380:	48 f4       	brcc	.+18     	; 0x394 <MCAL_SPI_voidInit+0xea>
		{
			assign_bit(SPCR,SPCR_DORD,ptr_info->spi_data_direction);
 382:	8d b1       	in	r24, 0x0d	; 13
 384:	28 2f       	mov	r18, r24
 386:	2f 7d       	andi	r18, 0xDF	; 223
 388:	30 e2       	ldi	r19, 0x20	; 32
 38a:	93 9f       	mul	r25, r19
 38c:	c0 01       	movw	r24, r0
 38e:	11 24       	eor	r1, r1
 390:	82 2b       	or	r24, r18
 392:	8d b9       	out	0x0d, r24	; 13
		}
		if (((ptr_info->clk_phase)==CLK_SAMPLE_LEADING) || ((ptr_info->clk_phase)==CLK_SAMPLE_TRAILING))
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	30 f4       	brcc	.+12     	; 0x3a6 <MCAL_SPI_voidInit+0xfc>
		{
			assign_bit(SPCR,SPCR_CPHA,ptr_info->clk_phase);
 39a:	9d b1       	in	r25, 0x0d	; 13
 39c:	9b 7f       	andi	r25, 0xFB	; 251
 39e:	88 0f       	add	r24, r24
 3a0:	88 0f       	add	r24, r24
 3a2:	89 2b       	or	r24, r25
 3a4:	8d b9       	out	0x0d, r24	; 13
		}
		set_bit(SPCR,SPCR_SPE);
 3a6:	6e 9a       	sbi	0x0d, 6	; 13
	}
	
	
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <MCAL_SPI_MasterTransData>:

void MCAL_SPI_MasterTransData(uint8_t u8Data)
{
	SPDR = u8Data;
 3ae:	8f b9       	out	0x0f, r24	; 15
	MCAL_DIO_u8PinVal(dio_portB,dio_pin_4,dio_pin_low);	
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	64 e0       	ldi	r22, 0x04	; 4
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 a5 00 	call	0x14a	; 0x14a <MCAL_DIO_u8PinVal>
	set_bit(SPCR,SPCR_SPE);
 3ba:	6e 9a       	sbi	0x0d, 6	; 13
	while(get_bit(SPSR,SPSR_SPIF)!=1);
 3bc:	77 9b       	sbis	0x0e, 7	; 14
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <MCAL_SPI_MasterTransData+0xe>
	clr_bit(SPCR,SPCR_SPE);
 3c0:	6e 98       	cbi	0x0d, 6	; 13
	MCAL_DIO_u8PinVal(dio_portB,dio_pin_4,dio_pin_high);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	64 e0       	ldi	r22, 0x04	; 4
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 a5 00 	call	0x14a	; 0x14a <MCAL_DIO_u8PinVal>
 3cc:	08 95       	ret

000003ce <MCAL_USART_voidInit>:

void MCAL_USART_voidInit(uint32_t BaudRate)
{
	
	uint32_t BaudPrescale;
	BaudPrescale = ((F_CLK/(BaudRate*16UL))-1);
 3ce:	dc 01       	movw	r26, r24
 3d0:	cb 01       	movw	r24, r22
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	9c 01       	movw	r18, r24
 3e4:	ad 01       	movw	r20, r26
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	44 1f       	adc	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	74 e2       	ldi	r23, 0x24	; 36
 3fa:	84 ef       	ldi	r24, 0xF4	; 244
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 32 02 	call	0x464	; 0x464 <__udivmodsi4>
 402:	ba 01       	movw	r22, r20
 404:	a9 01       	movw	r20, r18
 406:	41 50       	subi	r20, 0x01	; 1
 408:	51 09       	sbc	r21, r1
 40a:	61 09       	sbc	r22, r1
 40c:	71 09       	sbc	r23, r1
	/*enable transmitter and receiver*/
	usart_UCSRB |= (1<<usart_UCSRB_RXEN)|(1<<usart_UCSRB_TXEN);
 40e:	8a b1       	in	r24, 0x0a	; 10
 410:	88 61       	ori	r24, 0x18	; 24
 412:	8a b9       	out	0x0a, r24	; 10
	usart_UCSRC_UBRRH |= (1<<usart_UCSRC_URSEL)|(1<<usart_UCSRC_UCSZ1)|(1<<usart_UCSRC_UCSZ0);
 414:	80 b5       	in	r24, 0x20	; 32
 416:	86 68       	ori	r24, 0x86	; 134
 418:	80 bd       	out	0x20, r24	; 32
	/*MCAL_DIO_u8PinDirection(dio_portD,dio_pin_3,dio_pin_output);*/
	/*MCAL_DIO_u8PinVal(dio_portD,dio_pin_3,dio_pin_high);*/
	/*set baud rate*/
	usart_UBRRL = (uint8_t) BaudPrescale;
 41a:	49 b9       	out	0x09, r20	; 9
	usart_UCSRC_UBRRH = (uint8_t)(BaudPrescale>>8);
 41c:	bb 27       	eor	r27, r27
 41e:	a7 2f       	mov	r26, r23
 420:	96 2f       	mov	r25, r22
 422:	85 2f       	mov	r24, r21
 424:	80 bd       	out	0x20, r24	; 32
 426:	08 95       	ret

00000428 <MCAL_USART_voidTransmit>:
	/*MCAL_DIO_u8PinVal(dio_portC,dio_pin_2,dio_pin_high);*/
}

void MCAL_USART_voidTransmit(uint8_t Data)
{
	while((usart_UCSRA&(1<<usart_UCSRA_UDRE))==0);
 428:	5d 9b       	sbis	0x0b, 5	; 11
 42a:	fe cf       	rjmp	.-4      	; 0x428 <MCAL_USART_voidTransmit>
	usart_UDR = Data;
 42c:	8c b9       	out	0x0c, r24	; 12
 42e:	08 95       	ret

00000430 <MCAL_USART_u8Receive>:
}
uint8_t MCAL_USART_u8Receive()
{
	while((usart_UCSRA&(1<<usart_UCSRA_RXC))==0);
 430:	5f 9b       	sbis	0x0b, 7	; 11
 432:	fe cf       	rjmp	.-4      	; 0x430 <MCAL_USART_u8Receive>
	return usart_UDR;
 434:	8c b1       	in	r24, 0x0c	; 12
}
 436:	08 95       	ret

00000438 <MCAL_USART_voidTransmitString>:
void MCAL_USART_voidTransmitString(uint8_t *ptr_data)
{
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	fc 01       	movw	r30, r24
	uint8_t counter = 0;
	while(ptr_data[counter] != '\0')
 440:	80 81       	ld	r24, Z
 442:	88 23       	and	r24, r24
 444:	59 f0       	breq	.+22     	; 0x45c <MCAL_USART_voidTransmitString+0x24>
 446:	8f 01       	movw	r16, r30
 448:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MCAL_USART_voidTransmit(ptr_data[counter]);
 44a:	0e 94 14 02 	call	0x428	; 0x428 <MCAL_USART_voidTransmit>
		counter++;
 44e:	cf 5f       	subi	r28, 0xFF	; 255
	return usart_UDR;
}
void MCAL_USART_voidTransmitString(uint8_t *ptr_data)
{
	uint8_t counter = 0;
	while(ptr_data[counter] != '\0')
 450:	f8 01       	movw	r30, r16
 452:	ec 0f       	add	r30, r28
 454:	f1 1d       	adc	r31, r1
 456:	80 81       	ld	r24, Z
 458:	81 11       	cpse	r24, r1
 45a:	f7 cf       	rjmp	.-18     	; 0x44a <MCAL_USART_voidTransmitString+0x12>
	{
		MCAL_USART_voidTransmit(ptr_data[counter]);
		counter++;
	}
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <__udivmodsi4>:
 464:	a1 e2       	ldi	r26, 0x21	; 33
 466:	1a 2e       	mov	r1, r26
 468:	aa 1b       	sub	r26, r26
 46a:	bb 1b       	sub	r27, r27
 46c:	fd 01       	movw	r30, r26
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__udivmodsi4_ep>

00000470 <__udivmodsi4_loop>:
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	ee 1f       	adc	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	a2 17       	cp	r26, r18
 47a:	b3 07       	cpc	r27, r19
 47c:	e4 07       	cpc	r30, r20
 47e:	f5 07       	cpc	r31, r21
 480:	20 f0       	brcs	.+8      	; 0x48a <__udivmodsi4_ep>
 482:	a2 1b       	sub	r26, r18
 484:	b3 0b       	sbc	r27, r19
 486:	e4 0b       	sbc	r30, r20
 488:	f5 0b       	sbc	r31, r21

0000048a <__udivmodsi4_ep>:
 48a:	66 1f       	adc	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	1a 94       	dec	r1
 494:	69 f7       	brne	.-38     	; 0x470 <__udivmodsi4_loop>
 496:	60 95       	com	r22
 498:	70 95       	com	r23
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	bd 01       	movw	r22, r26
 4a4:	cf 01       	movw	r24, r30
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
